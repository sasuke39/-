<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 配置 spring 创建容器时要扫描的包 -->
    <context:component-scan base-package="cn.zxh">
        <!--制定扫包规则，不扫描@Controller 注解的 JAVA 类，其他的还是要扫描 -->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>

    </context:component-scan>

    <bean id="jsonArray" class="com.alibaba.fastjson.JSONArray"/>


    <!--    spring整合mybatis-->

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:jdbcConfig.properties"/>

    <!--1.配置连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--2.配置SQLSessionFactory工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--3.配置AccountDao接口所在包-->
    <bean  id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.zxh.dao"/>
    </bean>

        <!--  4.配置Spring框架的事务声明式管理  -->
    <!-- 4.1 配置事务管理器  -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 4.2 配置事务通知  find*表示以find方法开头 read-only 是否是只读型  在find*后写*表示除了find*方法以外 -->
    <!-- 4.21 事务通知里还有隔离级别 传播类型等  -->
    <tx:advice transaction-manager="dataSourceTransactionManager" id="txAdvice">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="*" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>
    <!-- 4.3 配置AOP增强  切面  切入点  -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.zxh.service.impl.*ServiceImpl.*(..))"/>
    </aop:config>

    <!-- 配置jedis连接池 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name = "host" value="192.168.0.102"/>
        <constructor-arg name = "port" value="6379"/>
    </bean>

    <!-- 配置操作单机版redis的实现类 -->
<!--    <bean id="poolJedisClient" class="cn.jindou.redis.RedisPool" />-->


<!--            &lt;!&ndash;  redis配置  &ndash;&gt;-->
<!--    <bean id="annotationPropertyConfigurerRedis"-->
<!--          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property name="order" value="1" />-->
<!--        <property name="ignoreUnresolvablePlaceholders" value="true" />-->
<!--        <property name="locations">-->
<!--            <list>-->
<!--                <value>classpath:redis.properties</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

<!--    &lt;!&ndash; redis数据源 &ndash;&gt;-->
<!--    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
<!--        &lt;!&ndash; 最大空闲数 &ndash;&gt;-->
<!--        <property name="maxIdle" value="${redis.maxIdle}" />-->
<!--        &lt;!&ndash; 最大空连接数 &ndash;&gt;-->
<!--        <property name="maxTotal" value="${redis.maxTotal}" />-->
<!--        &lt;!&ndash; 最大等待时间 &ndash;&gt;-->
<!--        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />-->
<!--        &lt;!&ndash; 返回连接时，检测连接是否成功 &ndash;&gt;-->
<!--        <property name="testOnBorrow" value="${redis.testOnBorrow}" />-->
<!--    </bean>-->

<!--    &lt;!&ndash; Spring-redis连接池管理工厂 &ndash;&gt;-->
<!--    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
<!--        &lt;!&ndash; IP地址 &ndash;&gt;-->
<!--        <property name="hostName" value="${redis.host}" />-->
<!--        &lt;!&ndash; 端口号 &ndash;&gt;-->
<!--        <property name="port" value="${redis.port}" />-->
<!--        <property name="password" value="${redis.password}" />-->
<!--        &lt;!&ndash; 超时时间 默认2000&ndash;&gt;-->
<!--        <property name="timeout" value="${redis.timeout}" />-->
<!--        &lt;!&ndash; 连接池配置引用 &ndash;&gt;-->
<!--        <property name="poolConfig" ref="poolConfig" />-->
<!--        &lt;!&ndash; usePool：是否使用连接池 &ndash;&gt;-->
<!--        <property name="usePool" value="true"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; redis template definition &ndash;&gt;-->
<!--    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
<!--        <property name="connectionFactory" ref="jedisConnectionFactory" />-->
<!--        <property name="keySerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="valueSerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="hashKeySerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="hashValueSerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
<!--        </property>-->
<!--        &lt;!&ndash;开启事务  &ndash;&gt;-->
<!--        <property name="enableTransactionSupport" value="true"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;自定义redis工具类,在需要缓存的地方注入此类  &ndash;&gt;-->
<!--    <bean id="redisService" class="com.cff.springwork.redis.service.RedisService">-->
<!--        <property name="redisTemplate" ref="redisTemplate" />-->
<!--    </bean>-->

</beans>